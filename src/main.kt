import korlibs.korge.*
import korlibs.korge.scene.*
import korlibs.korge.view.*
import korlibs.image.color.*
import korlibs.math.geom.*
import korlibs.korge.input.*
import korlibs.korge.ui.*
import logic.*
import model.*

suspend fun main() = Korge(
    windowSize = Size(600, 740), 
    backgroundColor = Colors["#2b2b2b"],
    title = "Gomoku KorGE - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–º–Ω–∏"
) {
    val sceneContainer = sceneContainer()
    sceneContainer.changeTo { GomokuScene() }
}

class GomokuScene : Scene() {
    private val gameLogic = GameLogic()
    private lateinit var boardContainer: Container
    private lateinit var statusText: Text
    private lateinit var moveCountText: Text
    private val cellSize = 35.0
    private val boardOffset = Point(50, 140) // –•–æ—Ä–æ—à–∏–π –æ—Ç—Å—Ç—É–ø
    
    private val cells = Array(15) { Array<SolidRect?>(15) { null } }
    private val stones = Array(15) { Array<Text?>(15) { null } }
    
    override suspend fun SContainer.sceneMain() {
        setupUI()
        setupBoard()
        updateDisplay()
    }
    
    private suspend fun SContainer.setupUI() {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        text("üéÆ Gomoku", 32.0, Colors.WHITE) {
            x = 250.0
            y = 20.0
        }
        
        // –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        statusText = text("–•–æ–¥ —á—ë—Ä–Ω—ã—Ö ‚óè", 20.0, Colors.WHITE) {
            x = 220.0
            y = 75.0 
        }
        
        // –°—á—ë—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
        moveCountText = text("–•–æ–¥—ã: 0", 16.0, Colors.LIGHTGRAY) {
            x = 50.0
            y = 690.0
        }
        
        setupControlButtons()
    }
    
    private suspend fun SContainer.setupControlButtons() {
        val buttonY = 690.0
        
        uiButton(size = Size(80, 30)) {
            text = "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
            position(200, buttonY)
            onClick { newGame() }
        }
        
        uiButton(size = Size(80, 30)) {
            text = "–û—Ç–º–µ–Ω–∏—Ç—å"
            position(290, buttonY)
            onClick { undoMove() }
        }
        
        uiButton(size = Size(60, 30)) {
            text = "–í—ã—Ö–æ–¥"
            position(380, buttonY)
            onClick { gameWindow.close() }
        }
    }
    
    private suspend fun SContainer.setupBoard() {
        boardContainer = container {
            position(boardOffset)
            
            // –§–æ–Ω –¥–æ—Å–∫–∏
            solidRect(
                width = cellSize * 15 + 20,
                height = cellSize * 15 + 20,
                color = Colors["#8B4513"]
            ) {
                position(-10, -10)
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏
            for (row in 0 until 15) {
                for (col in 0 until 15) {
                    val cell = solidRect(
                        width = cellSize - 2,
                        height = cellSize - 2,
                        color = Colors["#DEB887"]
                    ) {
                        position(col * cellSize + 1, row * cellSize + 1)
                        
                        mouse {
                            onDown { makeMove(row, col) }
                            onOver {
                                if (gameLogic.canMakeMove(row, col)) {
                                    color = Colors["#F4E4BC"]
                                }
                            }
                            onOut {
                                if (stones[row][col] == null) {
                                    color = Colors["#DEB887"]
                                }
                            }
                        }
                    }
                    
                    cells[row][col] = cell
                }
            }
        }
    }
    
    private fun makeMove(row: Int, col: Int) {
        val result = gameLogic.makeMove(row, col)
        
        when (result) {
            is MoveResult.Success -> {
                updateDisplay()
                if (result.gameState != GameState.PLAYING) {
                    handleGameEnd(result)
                }
            }
            is MoveResult.InvalidMove -> {}
            is MoveResult.GameEnded -> {}
        }
    }
    
    private fun updateDisplay() {
        val board = gameLogic.getBoard()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–Ω–∏ –Ω–∞ –ø–æ–ª–µ
        for (row in 0 until 15) {
            for (col in 0 until 15) {
                val stone = board.getStone(row, col)
                val existingStone = stones[row][col]
                
                if (stone != null && existingStone == null) {
                    // –ü–†–ê–í–ò–õ–¨–ù–´–ï –ö–ê–ú–ù–ò: –∫—Ä—É–≥–ª—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏!
                    val stoneSymbol = if (stone == StoneColor.BLACK) "‚óè" else "‚óã"
                    
                    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
                    val stoneColor = if (stone == StoneColor.BLACK) {
                        Colors["#000000"] // –ê–±—Å–æ–ª—é—Ç–Ω–æ —á–µ—Ä–Ω—ã–π
                    } else {
                        Colors["#FFFFFF"] // –ê–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–ª—ã–π
                    }
                    
                    // –î–ª—è –±–µ–ª—ã—Ö –∫–∞–º–Ω–µ–π –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–Ω—É—é –æ–±–≤–æ–¥–∫—É
                    if (stone == StoneColor.WHITE) {
                        // –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –ø–æ–¥ –±–µ–ª—ã–º –∫–∞–º–Ω–µ–º
                        boardContainer.text("‚óè", 36.0, Colors["#000000"]) {
                            position(
                                col * cellSize + cellSize / 2 - 18,
                                row * cellSize + cellSize / 2 - 18
                            )
                        }
                    }
                    
                    val stoneText = boardContainer.text(
                        stoneSymbol,
                        32.0,
                        stoneColor
                    ) {
                        position(
                            col * cellSize + cellSize / 2 - 16,
                            row * cellSize + cellSize / 2 - 16
                        )
                    }
                    stones[row][col] = stoneText
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–ª–µ—Ç–∫–∏
                    cells[row][col]?.color = Colors["#CD853F"]
                    
                } else if (stone == null && existingStone != null) {
                    // –£–±–∏—Ä–∞–µ–º –∫–∞–º–µ–Ω—å (–æ—Ç–º–µ–Ω–∞ —Ö–æ–¥–∞)
                    existingStone.removeFromParent()
                    stones[row][col] = null
                    cells[row][col]?.color = Colors["#DEB887"]
                }
            }
        }
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –ª–∏–Ω–∏—é
        gameLogic.winningLine?.positions?.forEach { pos ->
            cells[pos.row][pos.col]?.color = Colors.GOLD
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        statusText.text = when (gameLogic.gameState) {
            GameState.PLAYING -> "–•–æ–¥ ${if (gameLogic.currentPlayer == StoneColor.BLACK) "—á—ë—Ä–Ω—ã—Ö ‚óè" else "–±–µ–ª—ã—Ö ‚óã"}"
            GameState.BLACK_WINS -> "üéâ –ü–æ–±–µ–¥–∏–ª–∏ —á—ë—Ä–Ω—ã–µ ‚óè!"
            GameState.WHITE_WINS -> "üéâ –ü–æ–±–µ–¥–∏–ª–∏ –±–µ–ª—ã–µ ‚óã!" 
            GameState.DRAW -> "ü§ù –ù–∏—á—å—è!"
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
        moveCountText.text = "–•–æ–¥—ã: ${gameLogic.getMoveCount()}"
    }
    
    private fun handleGameEnd(result: MoveResult.Success) {
        println("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: ${result.gameState}")
    }
    
    private fun newGame() {
        // –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–∞–º–Ω–∏
        for (row in 0 until 15) {
            for (col in 0 until 15) {
                stones[row][col]?.removeFromParent()
                stones[row][col] = null
                cells[row][col]?.color = Colors["#DEB887"]
            }
        }
        
        gameLogic.resetGame()
        updateDisplay()
    }
    
    private fun undoMove() {
        val result = gameLogic.undoMove()
        if (result is UndoResult.Success) {
            updateDisplay()
        }
    }
}
