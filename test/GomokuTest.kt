package test

import logic.*
import model.*

fun main() {
    println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gomoku KorGE...")
    
    testBoard()
    testGameLogic()
    testWinConditions()
    
    println("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! KorGE –≤–µ—Ä—Å–∏—è –≥–æ—Ç–æ–≤–∞!")
}

fun testBoard() {
    println("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º Board:")
    
    val board = Board()
    
    // –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞–º–Ω–µ–π
    assert(board.placeStone(7, 7, StoneColor.BLACK)) { "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞–º–Ω—è" }
    assert(board.getStone(7, 7) == StoneColor.BLACK) { "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–º–Ω—è" }
    assert(!board.isEmpty(7, 7)) { "–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞" }
    assert(!board.placeStone(7, 7, StoneColor.WHITE)) { "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ" }
    
    // –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã
    val undone = board.undoLastMove()
    assert(undone != null && undone.player == StoneColor.BLACK) { "–û—Ç–º–µ–Ω–∞ —Ö–æ–¥–∞" }
    assert(board.isEmpty(7, 7)) { "–ö–ª–µ—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞" }
    
    println("‚úÖ Board —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
}

fun testGameLogic() {
    println("\nüéÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º GameLogic:")
    
    val game = GameLogic()
    
    // –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Ö–æ–¥–æ–≤
    assert(game.currentPlayer == StoneColor.BLACK) { "–ß—ë—Ä–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç" }
    
    val result1 = game.makeMove(7, 7)
    assert(result1 is MoveResult.Success) { "–ü–µ—Ä–≤—ã–π —Ö–æ–¥" }
    assert(game.currentPlayer == StoneColor.WHITE) { "–°–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞" }
    
    // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ö–æ–¥–∞
    val result2 = game.makeMove(7, 7)
    assert(result2 is MoveResult.InvalidMove) { "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω" }
    
    println("‚úÖ GameLogic —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
}

fun testWinConditions() {
    println("\nüèÜ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã:")
    
    val game = GameLogic()
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–±–µ–¥–∞
    for (i in 0 until 4) {
        game.makeMove(7, i)     // —á—ë—Ä–Ω—ã–π
        game.makeMove(8, i)     // –±–µ–ª—ã–π
    }
    
    val winResult = game.makeMove(7, 4) // —á—ë—Ä–Ω—ã–π –ø–æ–±–µ–∂–¥–∞–µ—Ç
    assert(winResult is MoveResult.Success && winResult.gameState == GameState.BLACK_WINS) { "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–±–µ–¥–∞" }
    assert(winResult is MoveResult.Success && winResult.winningLine != null) { "–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –ª–∏–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞" }
    
    // –¢–µ—Å—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–±–µ–¥—ã
    val game2 = GameLogic()
    for (i in 0 until 4) {
        game2.makeMove(i, 7)     // —á—ë—Ä–Ω—ã–π
        game2.makeMove(i, 8)     // –±–µ–ª—ã–π
    }
    
    val winResult2 = game2.makeMove(4, 7) // —á—ë—Ä–Ω—ã–π –ø–æ–±–µ–∂–¥–∞–µ—Ç
    assert(winResult2 is MoveResult.Success && winResult2.gameState == GameState.BLACK_WINS) { "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–±–µ–¥–∞" }
    
    // –¢–µ—Å—Ç –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–±–µ–¥—ã
    val game3 = GameLogic()
    for (i in 0 until 4) {
        game3.makeMove(i, i)         // —á—ë—Ä–Ω—ã–π
        game3.makeMove(i, i + 1)     // –±–µ–ª—ã–π
    }
    
    val winResult3 = game3.makeMove(4, 4) // —á—ë—Ä–Ω—ã–π –ø–æ–±–µ–∂–¥–∞–µ—Ç
    assert(winResult3 is MoveResult.Success && winResult3.gameState == GameState.BLACK_WINS) { "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–±–µ–¥–∞" }
    
    println("‚úÖ –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–±–µ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
}

fun assert(condition: Boolean, message: () -> String) {
    if (!condition) {
        throw AssertionError("–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${message()}")
    }
}
